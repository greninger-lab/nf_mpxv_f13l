includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

params {

	help = false

	// General params                                                                   
	input = null                                                                
	output = 'nf_mpxv_f13l_output'
	run_name = 'run'
	ref = "${projectDir}/assets/ON563414.fa" 
	ref_index = "${projectDir}/assets/ON563414.fa.fai"
	gff = "${projectDir}/assets/ON563414.gff" 

	// FASTP option                                                             
	skip_fastp = false
	skip_fastqc = false
	adapter_fasta = "${projectDir}/assets/adapter.fasta"
	min_trim_reads = 0
	trim_len = 100
	save_trimmed_reads = false
	save_trimmed_fail = false
	save_merged = false

	// Minimum number of mapped reads for downstream processes
	min_mapped_reads = 1000

	// Seqtk sample options
	sample = false
	save_sample_reads = false

	// iVar variants
	ivar_variants_t = 0.01
	ivar_variants_q = 20
	ivar_variants_m = 10
	save_mpileup = false

	// iVar consensus 
	ivar_consensus_t = 0.6
	ivar_consensus_q = 20
	ivar_consensus_m = 10
	save_intermediate_consensus	= false

	// Max resource option
	max_cpus = 32
	max_memory = '64.GB'
	max_time = '32.h'

}

profiles {
	docker {
		docker.enabled = true
	}
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
